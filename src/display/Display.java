/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package display;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JTable;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author yibe1
 */
public class Display extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private static final String VIDEO_PATH = "Glycolysis.mp4";
    private BufferedReader br;
    private boolean success = false;
    private Date dt;
    private String date;
    private final int swidth;
    private final int sheight;

    /**
     * Creates new form Display
     */
    private Image image;

    public void setImage(Image image) {
        this.image = image;
        repaint();
    }

    public Display() throws InterruptedException, IOException {
        initComponents();
        
       

        swidth = Toolkit.getDefaultToolkit().getScreenSize().width;
        sheight = Toolkit.getDefaultToolkit().getScreenSize().height;
        p1.setPreferredSize(new Dimension((int) swidth * 25 / 100, sheight * 90 / 100));
        p2.setPreferredSize(new Dimension((int) swidth * 75 / 100, sheight * 90 / 100));
//        board.setLayout(new WrapLayout(FlowLayout.LEFT));
//        board.setLayout(new GridBagLayout());
        board.setLayout(new BoxLayout(board, BoxLayout.Y_AXIS));
        
        ImagePanel panel = new ImagePanel("Images");
        videoPane.setPreferredSize(new Dimension(20*swidth/100,20*swidth/100 ));
        videoPane.add(panel, BorderLayout.CENTER);

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        Font headerFont = new Font("Verdana", Font.BOLD, 35);
        load_waiting_patients ld = new load_waiting_patients(this, waiting, board, grabIp(), swidth, sheight);
        ld.start();

        pane.add(new ScrollingText(pane.getWidth(), pane.getHeight()));
        pane.setLayout(new GridLayout(0, 1));

    }
    public String grabIp() throws IOException {
        File file = new File("ip.txt");
        if (!file.exists()) {
            file.createNewFile();
        }

        br = new BufferedReader(new FileReader(file));
        String ip = br.readLine();

        if (ip != null && new HandShake().shake(ip)) {
            System.out.println("Connection success at welcome with exiting ip");
            success = true;
        } else {
            System.out.println("hhhsldfjsdfsdfffffff");
            FileWriter fr = null;
            try {
                ip = new Client().grabIp();
                if (ip != null) {
                    System.out.println("connected with new Ip = " + ip);
                    success = true;
                } else {
                    ip = JOptionPane.showInputDialog("Unable to get Ip. Enter IP");
                }

                fr = new FileWriter(file);
                BufferedWriter br = new BufferedWriter(fr);
                br.write(ip);
                br.close();
                success = true;

            } catch (IOException ex) {
                Logger.getLogger(Repo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Repo.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fr.close();
                } catch (IOException ex) {
                    Logger.getLogger(Repo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return ip;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pane = new javax.swing.JPanel();
        p1 = new javax.swing.JPanel();
        videoPane = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        waiting = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        p2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        board = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(1);
        setUndecorated(true);

        pane.setBackground(new java.awt.Color(204, 0, 204));
        pane.setFont(new java.awt.Font("Geez Able", 0, 11)); // NOI18N

        javax.swing.GroupLayout paneLayout = new javax.swing.GroupLayout(pane);
        pane.setLayout(paneLayout);
        paneLayout.setHorizontalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        paneLayout.setVerticalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
        );

        p1.setBackground(new java.awt.Color(51, 51, 51));

        videoPane.setBackground(new java.awt.Color(51, 204, 255));
        videoPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        videoPane.setLayout(new java.awt.BorderLayout());

        waiting.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        waiting.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        waiting.setAutoscrolls(false);
        waiting.setRowHeight(30);
        waiting.setRowMargin(10);
        jScrollPane2.setViewportView(waiting);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 0));
        jLabel2.setText("Waiting Patients");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout p1Layout = new javax.swing.GroupLayout(p1);
        p1.setLayout(p1Layout);
        p1Layout.setHorizontalGroup(
            p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(videoPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        p1Layout.setVerticalGroup(
            p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p1Layout.createSequentialGroup()
                .addComponent(videoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        p2.setBackground(new java.awt.Color(0, 51, 51));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        board.setBackground(new java.awt.Color(51, 51, 51));
        board.setLayout(null);
        jScrollPane1.setViewportView(board);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Room");

        javax.swing.GroupLayout p2Layout = new javax.swing.GroupLayout(p2);
        p2.setLayout(p2Layout);
        p2Layout.setHorizontalGroup(
            p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 349, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        p2Layout.setVerticalGroup(
            p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Display().setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel board;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel p1;
    private javax.swing.JPanel p2;
    private static javax.swing.JPanel pane;
    private javax.swing.JPanel videoPane;
    private javax.swing.JTable waiting;
    // End of variables declaration//GEN-END:variables

}

class load_waiting_patients extends Thread {

    JTable waiting = new JTable();
    private final JPanel board;
    private final Display display;
    private final String ip;
    Repo repo;
    private final int swidth;
    private final int sheight;

    public load_waiting_patients(Display aThis, JTable waiting, JPanel board, String ip, int swidth, int sheight) throws IOException {

        this.waiting = waiting;
        this.board = board;
        this.display = aThis;
        this.ip = ip;
        this.repo = new Repo(ip);
        this.swidth = swidth;
        this.sheight = sheight;
    }

    ArrayList<String[]> pt = new ArrayList<>();
    ArrayList<String> onList = new ArrayList();

    @Override
    public void run() {

//        board.setLayout(new WrapLayout(FlowLayout.LEFT));
//board.setLayout(new GridLayout(0, 1));
        while (true) {

            try {
                display.repaint();
//                display.setExtendedState(JFrame.MAXIMIZED_BOTH);
                Thread.sleep(5000);
            } catch (InterruptedException ex) {
                System.out.println("Not sleeping. " + ex);
            }
            board.removeAll();
            try {
                pt = new Repo(ip).getWaiting();
            } catch (IOException ex) {
                Logger.getLogger(load_waiting_patients.class.getName()).log(Level.SEVERE, null, ex);
            }
            int j = 0, n = 0;
            for (int i = 0; i < waiting.getRowCount(); i++) {
                waiting.getModel().setValueAt("", i, 0);
            }
            int count = 0;
            System.out.println("pt size = " + pt.size());
            int c = 0;
            for (int i = 0; i < pt.size(); i++) {
                if (count > 15) {
                    break;
                }
//                
                if (Integer.parseInt(pt.get(i)[4]) == 0 || Integer.parseInt(pt.get(i)[4]) == 3) {
                    waiting.getModel().setValueAt(pt.get(i)[0], j, 0);

                    j++;
                } else if (Integer.parseInt(pt.get(i)[4]) == 1) {
                    String st = pt.get(i)[0] + pt.get(i)[1];
                    if (pt.get(i)[1].equals("-1")) {
                        continue;
                    }
                    Single_pt single_pt = new Single_pt(pt.get(i)[0], pt.get(i)[1], c);
                    board.add(single_pt);
                    display.repaint();
                    c++;
                    n++;
                } else {

                }
                count++;

            }
            board.repaint();
        }
    }
}
